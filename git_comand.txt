---------------------------------------------------------
参数说明
--system 系统
--global 用户
---------------------------------------------------------
初始化配置
用户信息
$ git config --global user.name "shfypp"
$ git config --global user.email "yuanchaogao@gmail.com"
---------------------------------------------------------
文件、文件夹操作
$ mkdir git			//当前目录下创建文件夹：git
$ pwd				//显示当前路径
$ dir				//文件列表
$ ls				//同上
$ clear				//清屏
$ touch a.html		//创建文件
$ cat a.html		//查看文件
$ rm a.html			//删除文件
$ git rm –r * 		//进入某个目录中，执行此语句，会删除该目录下的所有文件和子目录
---------------------------------------------------------
一些用到的操作
Shift+:wq 回车		//退出shell编辑器
---------------------------------------------------------
常用命令
$ git config --global --list	查看配置信息
$ git config user.name		git config <key>：某一项配置
---------------------------------------------------------
查看状态
$ git status	//查看当前状态
$ git status -s	//查看当前状态 状态概览
A 新添加到暂存区中的文件
D 删除的文件
---------------------------------------------------------
查看改变
$ git diff git_comand.txt		//查看工作空间和暂存空间的区别
$ git diff --cached git_comand.txt 	//查看暂存区和仓库区的区别
$ git diff HEAD //与上次 commit 之间的差别（爸爸）
$ git diff HEAD^ //与上上次（爷爷）
$ git diff HEAD^^ //与上上上次（曾祖父）
$ git diff HEAD~5 //与前面第5次commit（好吧…祖先吧）
$ git diff HEAD^..HEAD //中间是两个点比较(爸爸)和(爷爷)的差别
$ git diff f5fdjsalfjdskaf..4fdklsajfdksaf //比较 两个不同 hash 值记录之间的不同
$ git diff master bird //比较 branch 之间的不同
$ git diff --since=1.week.ago --until=1.minute.ago //还可以根据时间来比较哦
---------------------------------------------------------
提交
$ git commit -m "message"		//提交暂存区内容
$ git commit -a -m "跳过暂存直接提交"
---------------------------------------------------------
删除
$ git rm git_comand.txt 		//删除版本控制并删除文件
$ git rm -f git_comand.txt 		//删除版本控制并删除文件 工作区文件有变化需要加-f强制删除
$ git rm --cached test_ignore.log	//删除版本控制 保留文件 文件处于未跟踪文件清单中
---------------------------------------------------------
移动 重命名文件
$ git mv test_ignore.log test_ignore	//重命名文件
---------------------------------------------------------
查看提交历史
$ git log --pretty=oneline		//查看提条历史
$ git log --oneline --stat 		//显示每个文件的变化行数
$ git log --oneline --graph		//则可以图形化地显示 branch 的变化
$ git log -p --pretty=oneline	//查看提交历史 并查看历次提交的差异
$ git log -p -2 --pretty=oneline	//查看最近2次提交历史 并查看提交的差异
$ git log --stat --pretty=oneline	//查看提交历史 并查看提交的差异 简略统计信息
$ git log --stat --pretty=oneline --graph	//查看提交历史 并查看提交的差异 简略统计信息 美化显示
---------------------------------------------------------
版本回退
	git reset --hard 6d1a		回退到commit id为6d1a...的版本
	git reset --hard head^	回退到上一个版本
				   head 	当前版本
				   head^^	上上个版本
				   head~n	当前往上n个版本
				   
---------------------------------------------------------
撤销操作
--修改本次提交
$ git commit --amend	//暂存区从上次提交后没有变化,只修改提交信息;暂存区有变化则合并提交到上次的提交中
--暂存区内容退回到工作区
$ git reset HEAD git_comand.txt		
--撤销工作区内容的修改
$ git checkout git_comand.txt
---------------------------------------------------------
远程仓库的使用
$ git remote -v			//显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL
$ git remote show origin	//显示远程库信息
$ git fetch origin		//使用简写URL origin 下载远程车库
$ git push origin		//使用简写URL origin 上传远程车库
$ git remote rename pb paul	//重命名远程车库 pb 为 paul
$ git remote rm paul	//删除远程仓库 paul
---------------------------------------------------------
使用标签 通常用来发布结点（v1.0 等等）
$ git tag	//列出所有tag
$ git show v1.0		//显示tag为v1.0的版本信息
$ git tag -a v0.0 f0efc -m "项目初始化完成"		//后期打标签 -a 附注标签 f0efc 要追加到的版本 -m tag信息
$ git tag v1	//添加轻量标签
$ git push origin v1.0		//把标签v1.0推送到远程库  本地标签需要手动push才能同步到远程库
$ git push origin --tags	//把所有标签推送到远程库  本地标签需要手动push才能同步到远程库
$ git checkout -b version0.0 v0.0		//检出标签到一个分支
---------------------------------------------------------
Git使用分支
---------------------------------------------------------
对于我们日常常用的 git 命令，我们可以通过

$ git config --global alias.ss status //status 缩写成 st
$ git config --global alias.co checkout //checkout 缩写成 co
$ git config --global alias.br branch //branch 缩写成 br
$ git config --global alias.ci commit //commit 缩写成 ci


